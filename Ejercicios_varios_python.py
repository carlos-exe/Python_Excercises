# -*- coding: utf-8 -*-
"""Comidita👉👈

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xr8hwdM-nK_0YiAk4Jkv7T9wrAmUoKVC

#Clase 18 de marzo

##Clases
"""

## Clase 16 de marzo

# Clase: Animales

class animales(object): # En clase padre (antes de ella no hay nada): object-> clase predefinida, no hace nada, se puede no poner, solo poner ()

# Método constructor: método que nos obliga a especificar siempre los atributos
  def __init__(self,tamaño,color,habitat,taxonomía,peso):
    # Características que comparten todos los animales de la clase
    self.tamaño = tamaño
    self.color = color
    self.habitat = habitat
    self.taxonomía = taxonomía
    self.peso = peso

  def información(self):
    mensaje = ("El {} elegido tiene las siguientes características: Altura: {}. Color: {}. Habitat: {}. Peso: {}")
    print(mensaje.format(self.taxonomía,self.tamaño,self.color,self.habitat,self.peso))

# Instancia de objetos
león = animales(1.8,"amarillo","selva","mamífero",190)
tigre = animales(2.1,"naranja con negro","selva","mamífero",200)

# Forma de acceder a un método
león.información()

# Clase: Humanos

class humanos():

  def __init__(self,altura,colorpiel,nacionalidad):
    self.altura = altura
    self.colorpiel = colorpiel
    self.nacionalidad = nacionalidad

  def info(self):
    message = ("Esta persona mide {}, tiene color de piel {} y es de nacionalidad {}.")
    print(message.format(self.altura,self.colorpiel,self.nacionalidad))

Juandi = humanos(1.87,"negro","colombiana")
Nicolás = humanos(1.75,"indígena","siria")

Nicolás.info()

# Clase: Producto

class producto():

  def __init__(laura,producto,precio,iva):
    laura.producto = producto
    laura.precio = precio
    laura.iva = iva
    laura.precio_total = precio + precio*0.19

  def información(laura):
    mensaje = ("Debe pagar {}. El producto {} tiene un precio de {} sin el IVA de {}.")
    print(mensaje.format(laura.precio_total,laura.producto,laura.precio,laura.iva))

televisor = producto("televisor",1200500,"19%")

televisor.información()

# Productos con condicionales

class producto2():
  def __init__(self, producto2, precio2, iva2, precio_total2):
    self.pdo= producto2
    self.p= precio2
    self.iva2= iva2
    self.pt= precio_total2
  def info2(self):
    mensaje2= ("El {} tiene un precio de {} sin incluir el IVA, incluyendo el iva del {} el precio total es de {}")
    print(mensaje2.format(self.pdo, self.p, self.iva2, self.pt))

  def mod_precio(self,precio_inflado):
    self.pi= precio_inflado
    print("Para el dia sin IVA vamos a subir el precio a {}".format(self.pi))
    self.pt= precio_inflado
    self.p= precio_inflado*0.81

  def inicio_de_ventas(self):

    print("Estamos verificando que efectivamente estamos en el dia sin iva")
    self.dia="ok"
    self.promocion="ok"

    if (self.dia=="ok" and self.promocion=="ok"):
      return True
    else:
      return False
  def aviso_vendedor(self,comenzar):
    self.vendedor = comenzar
    if (self.vendedor):
      aprobacion= self.inicio_de_ventas()
    if (self.vendedor and aprobacion):
      return "El dia sin iva ha comenzado"
    if (self.vendedor and aprobacion == False):
      return "El dia sin iva no ha comenzado"
    else:
      return "Siga con su trabajo"

#Instancia del objeto
producto1= producto2("lgtv", 1800000, 19, 210000)
producto1.info2()
producto1.mod_precio(300000)
producto1.info2()
producto1.aviso_vendedor(True)

# Clase 18 de marzo

# Encapsulamiento: va a permitir que las variables estén en un entorno privado y que no se puedan modificar por medio de otras líneas de código
# Se hace con dos guiones al piso. Se utiliza cuando se quiere una protección adicional contra la redefinición de variables
# Ejemplo: self.p__= precio2

# Herencia

# La herencia permite que otras clases compartan atributos y métodos. Hay dos tipos: la herencia simple y la herencia múltiple

# Notación general:
# Herencia simple
# class nombre_de_la_clase(clase_de_la_cual_se_hereda):
# Herencia múltiple
# class nombre_de_la_clase(clase_herencia_1,clase_herencia_2,...,clase_herencia_n):

# Creación de la clase
class ser_humano(object):
  # Creación del método constructor
  def __init__(self,nombre,documento_id,altura,peso):
    self.nombre = nombre
    self.documento = documento_id
    self.altura = altura
    self.peso = peso
class estado_salud(ser_humano):
  def información(self):
    mensaje = ("El paciente se llama {} y está identificado con el documento {}. Su altura {} m y peso {} kg.")
    print(mensaje.format(self.nombre,self.documento,self.altura,self.peso))
# Instancia de objetos
# persona_1 = ser_humano("Nelson",123456789,160,70)
# Lo anterior daría error porque debemos usar la clase estado_salud
persona_1 = estado_salud("Nelson",123456789,160,70)
persona_1.información()

# Ahora con herencia múltiple
class ser_humano(object):
  # Creación del método constructor
  def __init__(self,nombre,documento_id,altura,peso):
    self.nombre = nombre
    self.documento = documento_id
    self.altura = altura
    self.peso = peso
class saludo():
  def saludito(self):
    print("El paciente enloqueció")
class estado_salud(ser_humano,saludo):
  def información(self):
    mensaje = ("El paciente se llama {} y está identificado con el documento {}. Su altura {} m y peso {} kg.")
    print(mensaje.format(self.nombre,self.documento,self.altura,self.peso))
persona_1 = estado_salud("Nelson",123456789,160,70)
persona_1.información()
persona_1.saludito()

# Identificando la necesidad de una superclase
# Surge cuando tenemos dos métodos que tienen exactamente el mismo nombre
# La función super() me permite realizar una herencia adecuada de atributos y de métodos
# Existen dos formas para utilizar una función super(). La más fácil es la siguiente:
class persona():
  def __init__(self,nombre,edad,lugar_nacimiento):
    self.nombre = nombre
    self.edad = edad
    self.lugar = lugar_nacimiento
  def descripción(self):
    print("Nombre: {}. Edad: {}. Lugar de nacimiento: {}.".format(self.nombre,self.edad,self.lugar))
class estudiante(persona):
  def __init__(self,matrícula,avance):
    super().__init__("Frailejón",35,"Nevado")
    self.matrícula = matrícula
    self.avance = avance
  def descripción(self):
    print("El estudiante está en la {} matrícula y su avance es {}%.".format(self.matrícula,self.avance))
estudiante_1 = estudiante(7,30)
estudiante_1.descripción()

# Ejemplo:
class comida():
  def __comidita__(self,nombre,tipo,vencimiento):
    self.nombre = nombre
    self.tipo = tipo
    self.vencimiento = vencimiento
  def descripción(self):
    print("La comida {} es de tipo {} y vence en {}.".format(self.nombre,self.tipo,self.vencimiento))
class comida_vegana(comida):
  def __init__(self,carne,pdanimal):
    # super().__init__('Atún Van Camps','Pescado','17/10/2022')
    # print("Veamos si la comida es vegana")
    self.carne = carne
    self.pdanimal = pdanimal
  def vegana(self):
    if (self.carne == "No" and self.proviene_de_animal == "No"):
      print("Sí es vegana")
    else:
      print("No es vegana")
class comida_cara(comida_vegana,comida):
  def __init__(self,precio,carne,pdanimal,nombre,tipo,vencimiento):
    super().__init__(carne,pdanimal)
    super().__comidita__(nombre,tipo,vencimiento)
    self.precio = precio
  def anuncio(self):
    if(self.precio > 30):
      print("La comida está muy cara, cuesta {} dólares.".format(self.precio))
    else:
      print("La comida está barata")
# atun = comida_cara(40,'No','No')
# atun.descripción()
# atun.pdanimal

Nuggets = comida_cara(4,'Sí','Sí','Nuggets de pollo','Pollo','17/10/2022')
Nuggets.nombre,Nuggets.tipo,Nuggets.vencimiento,Nuggets.carne,Nuggets.pdanimal,Nuggets.precio,Nuggets.descripción(),Nuggets.vegana(),Nuggets.anuncio()

# Ejemplo:
class comida():
  def __comidita__(self,nombre,tipo,vencimiento):
    self.nombre = nombre
    self.tipo = tipo
    self.vencimiento = vencimiento
  def descripción(self):
    print("La comida {} es de tipo {} y vence en {}.".format(self.nombre,self.tipo,self.vencimiento))
class comida_vegana(comida):
  def __init__(self,carne,pdanimal):
    # super().__init__('Atún Van Camps','Pescado','17/10/2022')
    # print("Veamos si la comida es vegana")
    self.carne = carne
    self.pdanimal = pdanimal
  def vegana(self):
    if (self.carne == "No" and self.proviene_de_animal == "No"):
      print("Sí es vegana")
    else:
      print("No es vegana")
class comida_cara(comida_vegana,comida):
  def __init__(self,precio,carne,pdanimal,nombre,tipo,vencimiento):
    super().__init__(carne,pdanimal)
    super().__comidita__(nombre,tipo,vencimiento)
    self.precio = precio
  def anuncio(self):
    if(self.precio > 30):
      print("La comida está muy cara, cuesta {} dólares.".format(self.precio))
    else:
      print("La comida está barata")
# atun = comida_cara(40,'No','No')
# atun.descripción()
# atun.pdanimal

Nuggets = comida_cara(4,'Sí','Sí','Nuggets de pollo','Pollo','17/10/2022')
Nuggets.nombre,Nuggets.tipo,Nuggets.vencimiento,Nuggets.carne,Nuggets.pdanimal,Nuggets.precio,Nuggets.descripción(),Nuggets.vegana(),Nuggets.anuncio()

"""###Ejercicio de 3 clases con super() y herencia múltiple"""

# Ejemplo de comida: Dada una clase madre llamada comida que pide el nombre,
#                    tipo y fecha de la comida, analizamos si es vegana con otra
#                    clase y también si es cara o barata con una clase nueva.

# La clase comida_cara, hereda todos los atributos de las clases anteriores
# con ayuda de la función Super() y a que aplicamos herencia múltiple, puesto
# que la clase comida_cara, tiene como objeto las dos clases anteriores.

class comida():
  def __comidita__(self,nombre,tipo,vencimiento):
    self.nombre = nombre
    self.tipo = tipo
    self.vencimiento = vencimiento
  def descripción(self):
    print("Descripción de comida:\n\nLa comida {} es de tipo {} y vence en {}.\n\n".format(self.nombre,self.tipo,self.vencimiento))
class comida_vegana(comida):
  def __init__(self,carne,pdanimal):
    # super().__init__('Atún Van Camps','Pescado','17/10/2022')                  # En caso de querer aplicar Super() en la segunda clase, borramos el
    self.carne = carne                                                           # comentario de la fila 18 y quitamos "nombre","tipo" y "vencimiento"
    self.pdanimal = pdanimal                                                     # de las filas 28 y 41, además, borramos la fila 30.
  def vegana(self):
    print("Ahora, veamos si la comida es vegana:\n")
    if (self.carne == "No" and self.pdanimal == "No"):
      print("Sí es vegana.\n\n")
    elif(self.carne == "Carlos" or self.pdanimal == "Carlos"):
      print("Laura, estás preciosa, la extraño mucho.")
    else:
      print("No es vegana.\n\n")
class comida_cara(comida_vegana,comida):
  def __init__(self,precio,carne,pdanimal,nombre,tipo,vencimiento):
    super().__init__(carne,pdanimal)
    super().__comidita__(nombre,tipo,vencimiento)
    self.precio = precio
  def anuncio(self):
    print("Consideración de precios:\n")
    if(self.precio > 30):
      print("La comida está muy cara, cuesta {} dólares.\n\n".format(self.precio))
    else:
      print("La comida está barata.\n\n")

Nuggets = comida_cara(4,'No','No','Nuggets de pollo','Pollo','17/10/2022')
Nuggets.descripción()
Nuggets.vegana()
Nuggets.anuncio()
Nuggets.nombre,Nuggets.tipo,Nuggets.vencimiento,Nuggets.carne,Nuggets.pdanimal,Nuggets.precio  #Todas las características de la comida de todas las clases <3

# Ejemplo de comida: Dada una clase madre llamada comida que pide el nombre,
#                    tipo y fecha de la comida, analizamos si es vegana con otra
#                    clase y también si es cara o barata con una clase nueva.
import os
# La clase comida_cara, hereda todos los atributos de las clases anteriores
# con ayuda de la función Super() y a que aplicamos herencia múltiple, puesto
# que la clase comida_cara, tiene como objeto las dos clases anteriores.
class comida():
  def __comidita__(self,nombre,tipo,vencimiento):
    self.nombre = nombre
    self.tipo = tipo
    self.vencimiento = vencimiento
  def descripción(self):
    print("Descripción de comida:\n\nLa comida {} es de tipo {} y vence en {}.\n\n".format(self.nombre,self.tipo,self.vencimiento))
class comida_vegana(comida):
  def __init__(self,carne,pdanimal):
    # super().__init__('Atún Van Camps','Pescado','17/10/2022')                  # En caso de querer aplicar Super() en la segunda clase, borramos el
    self.carne = carne                                                           # comentario de la fila 18 y quitamos "nombre","tipo" y "vencimiento"
    self.pdanimal = pdanimal                                                     # de las filas 28 y 41, además, borramos la fila 30.
  def vegana(self):
    print("Ahora, veamos si la comida es vegana:\n")
    if (self.carne == "No" and self.pdanimal == "No"):
      print("Sí es vegana.\n\n")
    elif(self.carne == "Carlos" or self.pdanimal == "Carlos"):
      print("Laura, estás preciosa, te extraño mucho.")
    else:
      print("No es vegana.\n\n")
class comida_cara(comida_vegana,comida):
  def __init__(self,precio,carne,pdanimal,nombre,tipo,vencimiento):
    super().__init__(carne,pdanimal)
    super().__comidita__(nombre,tipo,vencimiento)
    self.precio = precio
  def anuncio(self):
    print("Consideración de precios:\n")
    if(self.precio > 30):
      print("La comida está muy cara, cuesta {} dólares.\n\n".format(self.precio))
    else:
      print("La comida está barata.\n\n")

print('Ingrese valores: Precio,Carne (Sí o No),Procede de animal(Sí o No), Nombre, Tipo, Vencimiento')
precio = int(input())
carne = input()
animal = input()
nombre = input()
tipo = input()
vencimiento = input()
print('-------------------------------------------------------------\n\n')


Nuggets = comida_cara(precio,carne,animal,nombre,tipo,vencimiento)
Nuggets.descripción()
Nuggets.vegana()
Nuggets.anuncio()
Nuggets.nombre,Nuggets.tipo,Nuggets.vencimiento,Nuggets.carne,Nuggets.pdanimal,Nuggets.precio

print('Ingrese valor')
valor = input()
X = input()
Y = input()
Z = input()
if(valor == 2):
  print("gay",valor,X,Y,Z)
else:
  print("Nogay",valor,X,Y,Z)

class comida():
  def __comidita__(self,nombre,tipo,vencimiento):
    self.nombre = nombre
    self.tipo = tipo
    self.vencimiento = vencimiento
  def descripción(self):
    print("Descripción de comida:\n\nLa comida {} es de tipo {} y vence en {}.\n\n".format(self.nombre,self.tipo,self.vencimiento))
class comida_vegana(comida):
  def __init0__(self,carne,pdanimal):
    # super().__init__('Atún Van Camps','Pescado','17/10/2022')                  # En caso de querer aplicar Super() en la segunda clase, borramos el
    self.carne = carne                                                           # comentario de la fila 18 y quitamos "nombre","tipo" y "vencimiento"
    self.pdanimal = pdanimal                                                     # de las filas 28 y 41, además, borramos la fila 30.
  def vegana(self):
    print("Ahora, veamos si la comida es vegana:\n")
    if (self.carne == "No" and self.pdanimal == "No"):
      print("Sí es vegana.\n\n")
    elif(self.carne == "Carlos" or self.pdanimal == "Carlos"):
      print("Laura, estás preciosa, te extraño mucho.")
    else:
      print("No es vegana.\n\n")
class comida_cara(comida_vegana,comida):
  def __init__(self,precio,carne,pdanimal,nombre,tipo,vencimiento):
    super().__init0__(carne,pdanimal)
    super().__comidita__(nombre,tipo,vencimiento)
    self.precio = precio
  def anuncio(self):
    print("Consideración de precios:\n")
    if(self.precio > 30):
      print("La comida está muy cara, cuesta {} dólares.\n\n".format(self.precio))
    else:
      print("La comida está barata.\n\n")

x = comida_cara(30,'Sí','Sí','Laura','Persona','hoy')

x.anuncio()
x.descripción()
x.vegana()

"""##Figuras

###* $\Delta$ de Pascal
"""

filas = [1]
num = int(input(print("Ingrese el valor máximo")))
z = num
espacio = " "*(z+1)
print("{} {}".format(espacio,filas))
for i in range(1,num):
  l = len(filas)
  fnueva= [1]
  for j in range(0,l-1):
    nnum= filas[j]+filas[j+1]
    fnueva.append(nnum)
  fnueva.append(1)
  espacio = " "*z
  z -= 1
  print("{} {}".format(espacio,fnueva))
  filas = fnueva

"""###Cuadrado, Óvalo, Flecha, Rombo y Árbol."""

print("Árbol:")
aa = 8
bb = 0
for o in range(5):
  print(" "*aa +"*"+"*"*bb)
  aa = aa-1
  bb = bb+2
aah = 6
bbh = 4
for s in range(6):
  print(" "*aah+"*"+"*"*bbh)
  aah = aah-1
  bbh = bbh+2
for p in range(3):
  print("      ****")

import math
largof = int(input("Largo del árbol:"))
ancho = int(input("Ancho del tallo:"))
print("\nÁrbol:\n\n")
delta = int(largof/3)
rec = largof - delta*3
rad = delta+1
for i in range(delta):
  a = i
  z = rad - i
  for j in range(a,3+i):
    if j == 0:
      print(" "*rad+"*")
      z -= 1
    else:
      print(" "*z+"*"*(1+2*j))
      z -=1
      ultfil=1+2*j
esp = int((ultfil - ancho)/2)
if rec == 0:
  print(" "*esp+"*"*ancho)
else:
  for i in range(rec):
    print(" "*esp+"*"*ancho)

def Figuras():
  figura = input("¿Qué figura desea?\n1. Cuadrado\n2. Óvalo\n3. Flecha\n4. Rombo\n5. Árbol\n--> ")
  print("--------------------------\n")
  if int(figura) == 1:
    tamaño_cuadrado = int(input("¿De qué dimensión desea el cuadrado?: "))
    print("Cuadrado:")
    for i in range(tamaño_cuadrado):
      if (i == 0 or i == tamaño_cuadrado-1):
        print("* "*((tamaño_cuadrado)))
      else:
        print("*"+" "*(tamaño_cuadrado+(tamaño_cuadrado - 3))+"*")
  elif int(figura) == 2:
    ancho_óvalo = int(input("Ingrese las dimensiones del óvalo (el ancho mayor a 4 y el largo mayor a 2):\nAncho:"))
    largo_óvalo = int(input("Largo:"))
    print("\nÓvalo:\n\n")
    if(ancho_óvalo>4 and largo_óvalo>2):
      for i in range(largo_óvalo):
        if (i == 0 or i == largo_óvalo-1):
          print(" "*2+"*"*(ancho_óvalo-4))
        elif(i == 1 or i == largo_óvalo-2):
          print(" "+"*"+" "*(ancho_óvalo-4)+"*")
        else:
          print("*"+" "*(ancho_óvalo-2)+"*")
    else:
      print("Estúpido, le dije que el ancho mayor a 4 y el largo mayor a 2")
  elif int(figura) == 3:
    anchof = int(input("Ingrese las dimensiones de la flecha (con el ancho y largo mayores a 1, y que las medidas coincidan):\nAncho:"))
    largof = int(input("Largo:"))
    print("\nFlecha:\n\n")
    if(anchof>1 and largof>1):
      for i in range(largof):
        a = anchof-(i+1)
        if (i == 0 or i == largof-1):
          print(" "*(anchof-1)+"*")
        elif(a>=0):
          print(" "*a+"*"*(1+2*i))
          a -= 1
        else:
          print(" "*(anchof-1)+"*")
    else:
      print("Usted sabe leer?")
  elif int(figura) == 4:
    ancho = int(input("Ingrese el valor del rombo (solo valores impares):\nValor:"))
    print("\nRombo:\n\n")
    z = ancho
    e = 1
    n = 2
    if(ancho>2):
      if(ancho!=3):
        for i in range(ancho):
          espacio = ancho-(int(ancho/2)+1)
          if (i == 0 or i == ancho-1):
            print(" "*espacio+"*")
          elif(i<(int(ancho/2)+1)):
            print(" "*(espacio-i)+"*"+" "*(-1+2*i)+"*")
            espacio -= i
          else:
            print(" "*(e)+"*"+" "*(-1+2*(i-n))+"*")
            n = n+2
            e += 1
    else:
      print("Usted sabe leer?")

  elif int(figura) == 5:
    largof = int(input("Ingrese valores del árbol, largo mayor a 2 y ancho menor al largo.\nLargo del árbol:"))
    ancho = int(input("\nAncho del tallo:"))
    print("\nÁrbol:\n\n")      #Hasta aquí solo adquirimos los valores del ancho del tronco y el largo del árbol
    delta = int(largof/3)      # Delta es el ancho de las ramas
    rec = largof - delta*3     # Rec es la cantidad que sobra del largo para el tallo, o sea, si es 14, el tallo tiene un largo de 2 porque hay 4 ramas
    rad = delta+1              # Rad es el espacio que hay desde el inicio hasta el primer asterisco (lo saqué en cálculo en hoja)
    if largof > 2 and (ancho < largof): #Si es menor a 2, no hay ancho suficiente de rama, y si el ancho del tronco es mayor al largo, se vería horrible
      for i in range(delta):   # Hace delta ramas, entonces si delta es 4, va desde 0 hasta 3 haciendo 4 ramas
        a = i                  # a es un parámetro usado para iniciar el siguiente for en 0, 1, 2, etc
        z = rad - i            # z es el parámetro de espacio entre el inicio y los asteriscos (quitando el primero)
        for j in range(a,3+i): # Empieza en la rama 0, con el for iniciando en a = 0 y va hasta 2, haciendo 3 filas, luego de hacer esta rama, hace la siguiente de 1 a 4, de 2 a 5, etc, hasta que i llegue a delta-1
          if j == 0:           # Si es la primera fila, imprima el primer ejercicio
            print(" "*rad+"*") # Espacios por el rad (espacio max) + "*"
            z -= 1             # Le quito 1 a z para que los espacios del resto se vayan actualizando
          else:                # Si no, imprimir el resto de asteriscos
            print(" "*z+"*"*(1+2*j)) #Imprimir espacios por z concatenado un número impar de asteriscos dados por j que es el parámetro del segundo for, entonces en la primera iteración imprime 3 asteríscos, en la segunda, 5, en la tercera 7
            z -=1              # Reduce el espacio para la siguiente iteración
            ultfil=1+2*j       # Necesito saber cuántos asteríscos tiene la última fila para centrar el tronco
      esp = int((ultfil - ancho)/2) #Espacio desde el inicio hasta el inicio del tronco (lo saqué en hoja)
      if rec == 0:             # Si no sobra nada del largo para hacer el tronco, imprimo un tronco de una unidad
        print(" "*esp+"*"*ancho) #aquí
      else:                    # Si no, hago lo siguiente para imprimir el tronco
        for i in range(rec):   # desde cero hasta el número que sobre del largo, imprimir lo sigueinte
          print(" "*esp+"*"*ancho) # Imprimir espacio multiplicado por el número hallado anteriormente a partir de la última fila concatenado con un número de asteríscos multiplicado por el ancho del tronco
    else:
      print("Pone bien esos valores ome")

Figuras()

print(40,10)

"""# Taller: repaso de clases

1. Escriba una clase de Python para convertir un número romano a un número entero.

2. Escriba una clase de Python para convertir un número entero a un número romano.

##1. Romano a Entero

###Clase Romano a Entero pidiendo atributos explícitos:
"""

#1. Romano a Entero.
class Romanos(object):
  def __init__(self,miles,centenas,decenas,unidades): #Recibe los atributos del número
     self.unidades = unidades
     self.decenas = decenas
     self.centenas = centenas
     self.miles = miles
  def conversión_rom(self):                           #Le aplica la conversión
     #If de unidades (Establece los distintos str que pueden darse de 1 a 9)
     if self.unidades == "III":
       un1 = 3
     elif self.unidades == "II":
       un1 = 2
     elif self.unidades == "I":
       un1 = 1
     elif self.unidades == "IV":
       un1 = 4
     elif self.unidades == "V":
       un1 = 5
     elif self.unidades == "VI":
       un1 = 6
     elif self.unidades == "VII":
       un1 = 7
     elif self.unidades == "VIII":
       un1 = 7
     elif self.unidades == "IX":
       un1 = 9
     else:
       un1 = 0
     #If de decenas (Establece los distintos str que pueden darse de 10 a 90)
     if self.decenas == "X":
       dec1 = 1
     elif self.decenas == "XX":
       dec1 = 2
     elif self.decenas == "XXX":
       dec1 = 3
     elif self.decenas == "XL":
       dec1 = 4
     elif self.decenas == "L":
       dec1 = 5
     elif self.decenas == "LX":
       dec1 = 6
     elif self.decenas == "LXX":
       dec1 = 7
     elif self.decenas == "LXXX":
       dec1 = 8
     elif self.decenas == "XC":
       dec1 = 9
     else:
       dec1 = 0
     #If de centenas (Establece los distintos str que pueden darse de 100 a 900)
     if self.centenas == "C":
       cent1 = 1
     elif self.centenas == "CC":
       cent1 = 2
     elif self.centenas == "CCC":
       cent1 = 3
     elif self.centenas == "CD":
       cent1 = 4
     elif self.centenas == "D":
       cent1 = 5
     elif self.centenas == "DC":
       cent1 = 6
     elif self.centenas == "DCC":
       cent1 = 7
     elif self.centenas == "DCCC":
       cent1 = 8
     elif self.centenas == "CM":
       cent1 = 9
     else:
       cent1 = 0
     #If de miles (Establece los distintos str que pueden darse de 1000 a 3000, los romanos solo llegan a 3999)
     if self.miles == "M":
       mil1 = 1
     elif self.miles == "MM":
       mil1 = 2
     elif self.miles == "MMM":
       mil1 = 3
     else:
       mil1 = 0
     entero = (mil1*1000)+(cent1*100)+(dec1*10)+un1
     print("El número entero es:{}".format(entero))

"""###Prueba Romano a Entero pidiendo los atributos en código:"""

#Prueba
unidades = input("Ingrese el Número Romano por unidades, decenas, centenas y miles.\nTenga en cuenta que los romanos llegan solo hasta 3999.\n\nUnidades:")
decenas = input("\nDecenas:")
centenas = input("\nCentenas:")
miles = input("\nMiles:")
print("\n-----------------------\n\n")
Romano = Romanos(miles,centenas,decenas,unidades)
Romano.conversión_rom()

"""### Clase de Romanos a enteros pidiendo atributos desde la clase."""

class Romanos1(object):
  def __init__(self): #Recibe los atributos del número
     print("Conversor de Romanos a Enteros:\n\nIngrese el número en romano separado por unidades, decenas, centenas y unidades de mil:\n\n")
     self.unidades = input("\nIngrese el número de unidades: ")
     self.decenas = input("\nIngrese el número de decenas: ")
     self.centenas = input("\nIngrese el número de centenas: ")
     self.miles = input("\nIngrese el número de unidades de mil: ")
     print("\n\n------------------------------\n\n")
  def conversión_rom(self):                           #Le aplica la conversión
     #If de unidades (Establece los distintos str que pueden darse de 1 a 9)
     if self.unidades == "III":
       un1 = 3
     elif self.unidades == "II":
       un1 = 2
     elif self.unidades == "I":
       un1 = 1
     elif self.unidades == "IV":
       un1 = 4
     elif self.unidades == "V":
       un1 = 5
     elif self.unidades == "VI":
       un1 = 6
     elif self.unidades == "VII":
       un1 = 7
     elif self.unidades == "VIII":
       un1 = 7
     elif self.unidades == "IX":
       un1 = 9
     else:
       un1 = 0
     #If de decenas (Establece los distintos str que pueden darse de 10 a 90)
     if self.decenas == "X":
       dec1 = 1
     elif self.decenas == "XX":
       dec1 = 2
     elif self.decenas == "XXX":
       dec1 = 3
     elif self.decenas == "XL":
       dec1 = 4
     elif self.decenas == "L":
       dec1 = 5
     elif self.decenas == "LX":
       dec1 = 6
     elif self.decenas == "LXX":
       dec1 = 7
     elif self.decenas == "LXXX":
       dec1 = 8
     elif self.decenas == "XC":
       dec1 = 9
     else:
       dec1 = 0
     #If de centenas (Establece los distintos str que pueden darse de 100 a 900)
     if self.centenas == "C":
       cent1 = 1
     elif self.centenas == "CC":
       cent1 = 2
     elif self.centenas == "CCC":
       cent1 = 3
     elif self.centenas == "CD":
       cent1 = 4
     elif self.centenas == "D":
       cent1 = 5
     elif self.centenas == "DC":
       cent1 = 6
     elif self.centenas == "DCC":
       cent1 = 7
     elif self.centenas == "DCCC":
       cent1 = 8
     elif self.centenas == "CM":
       cent1 = 9
     else:
       cent1 = 0
     #If de miles (Establece los distintos str que pueden darse de 1000 a 3000, los romanos solo llegan a 3999)
     if self.miles == "M":
       mil1 = 1
     elif self.miles == "MM":
       mil1 = 2
     elif self.miles == "MMM":
       mil1 = 3
     else:
       mil1 = 0
     entero = (mil1*1000)+(cent1*100)+(dec1*10)+un1
     print("El número entero es:{}".format(entero))

"""### Prueba de conversor de Romanos a Enteros con atributos implícitos en la clase."""

Romano = Romanos1()
Romano.conversión_rom()

"""##2. Entero a Romano.

###Clase Entero a Romano con atributos explícitos:
"""

#2. Entero a Romano.
class Decimales(object):
  def __init__(self,número,forma): #Recibe los atributos del entero y la forma de verlos
     self.número = número
     self.forma = forma
  def conversión_dec(self):        #Convierte el entero a romano
     mil = int(self.número/1000)
     cent = int((self.número-mil*1000)/100)
     dec = int(((self.número-mil*1000) - cent*100)/10)
     un = int((self.número-mil*1000)-cent*100-dec*10)
     #Lo anterior saca las unidades de mil, centenas, decenas y unidades
     if self.número <= 3999: #Los romanos solo llegan hasta 3999
       #If de unidades
      if un <= 3:
        un1 = "I"*un     #Imprime hasta 3 III dependiendo del valor de unidades, multiplica I*unidades
      elif un == 4:
        un1 = "IV"       #Imprime el 4
      elif un > 3 and un < 9:
        un1 = "V"+"I"*(un-5) #Imprime hasta 8, a V le suma I*unidades, si las unidades son 8, le resta 5 que ya lo ponemos como V y esa diferencia la multiplica por I
      elif un == 9:
        un1 = "IX"       #Imprime el 9
      #If de decenas
      if dec <= 3:
        dec1 = "X"*dec   #Imprime hasta 30 XXX dependiendo del valor de decenas, multiplica X*decenas
      elif dec == 4:
        dec1 = "XL"      #Imprime el 40
      elif dec > 3 and dec < 9:
        dec1 = "L"+"X"*(dec-5) #Imprime hasta 80, a L le suma X*decenas, si las decenas son 8, le resta 5 que ya lo ponemos como L y esa diferencia la multiplica por X
      elif dec == 9:
        dec1 = "XC"      #Imprime el 90
      #If de centenas
      if cent <= 3:
        cent1 = "C"*cent #Imprime hasta 300 CCC dependiendo del valor de centenas, multiplica C*centenas
      elif cent == 4:
        cent1 = "CD"     #Imprime el 400
      elif cent > 3 and cent < 9:
        cent1 = "D"+"C"*(cent-5) #Imprime hasta 800, a D le suma C*centenas, si las centenas son 8, le resta 5 que ya lo ponemos como D y esa diferencia la multiplica por C
      elif cent == 9:
        cent1 = "CM"     #Imprime el 900
      #If de miles
      if mil <= 3:
        mil1 = "M"*mil   #Como el mil solo tiene M, MM o MMM solo varía dependiendo de las unidades de mil, así que solo multiplicamos M*mil
      #If de la forma como se ve el número
      if self.forma == "Junto" or self.forma == "junto" or self.forma == "juntito" or self.forma == "Juntito":
        print("Número Romano:{}{}{}{}".format(mil1,cent1,dec1,un1))
      elif self.forma == "Separado" or self.forma == "separado" or self.forma == "separadito" or self.forma == "Separadito":
        print("Número Romano:",mil1,cent1,dec1,un1)
      else:
        print("Escriba bien ome")
     else:
       print("Ingrese un número menor a 3999")

"""###Prueba Entero a Romano, pidiendo atributos en el código de manera explícita:"""

#Prueba
Número = int(input("Ingrese número a convertir (No mayor a 3999) y forma de ver el número (Separado o Junto).\n\nNúmero:"))
Forma = input("\nForma:")
print("\n-----------------------\n\n")
primero = Decimales(Número,Forma)
primero.conversión_dec()

"""###Clase de Entero a Romano pidiendo atributos al usuario desde la clase."""

#2. Entero a Romano.
class Decimales1(object):
  def __init__(self): #Recibe los atributos del entero y la forma de verlos
     print("Conversor enteros a romanos.\n\n")
     self.número = int(input("Ingrese número: \n"))
     self.forma = input("Ingrese forma de ver el número:")
     print("\n\n-------------------------------\n\n")
  def conversión_dec(self):        #Convierte el entero a romano
     mil = int(self.número/1000)
     cent = int((self.número-mil*1000)/100)
     dec = int(((self.número-mil*1000) - cent*100)/10)
     un = int((self.número-mil*1000)-cent*100-dec*10)
     #Lo anterior saca las unidades de mil, centenas, decenas y unidades
     if self.número <= 3999: #Los romanos solo llegan hasta 3999
       #If de unidades
      if un <= 3:
        un1 = "I"*un     #Imprime hasta 3 III dependiendo del valor de unidades, multiplica I*unidades
      elif un == 4:
        un1 = "IV"       #Imprime el 4
      elif un > 3 and un < 9:
        un1 = "V"+"I"*(un-5) #Imprime hasta 8, a V le suma I*unidades, si las unidades son 8, le resta 5 que ya lo ponemos como V y esa diferencia la multiplica por I
      elif un == 9:
        un1 = "IX"       #Imprime el 9
      #If de decenas
      if dec <= 3:
        dec1 = "X"*dec   #Imprime hasta 30 XXX dependiendo del valor de decenas, multiplica X*decenas
      elif dec == 4:
        dec1 = "XL"      #Imprime el 40
      elif dec > 3 and dec < 9:
        dec1 = "L"+"X"*(dec-5) #Imprime hasta 80, a L le suma X*decenas, si las decenas son 8, le resta 5 que ya lo ponemos como L y esa diferencia la multiplica por X
      elif dec == 9:
        dec1 = "XC"      #Imprime el 90
      #If de centenas
      if cent <= 3:
        cent1 = "C"*cent #Imprime hasta 300 CCC dependiendo del valor de centenas, multiplica C*centenas
      elif cent == 4:
        cent1 = "CD"     #Imprime el 400
      elif cent > 3 and cent < 9:
        cent1 = "D"+"C"*(cent-5) #Imprime hasta 800, a D le suma C*centenas, si las centenas son 8, le resta 5 que ya lo ponemos como D y esa diferencia la multiplica por C
      elif cent == 9:
        cent1 = "CM"     #Imprime el 900
      #If de miles
      if mil <= 3:
        mil1 = "M"*mil   #Como el mil solo tiene M, MM o MMM solo varía dependiendo de las unidades de mil, así que solo multiplicamos M*mil
      #If de la forma como se ve el número
      if self.forma == "Junto" or self.forma == "junto" or self.forma == "juntito" or self.forma == "Juntito":
        print("Número Romano:{}{}{}{}".format(mil1,cent1,dec1,un1))
      elif self.forma == "Separado" or self.forma == "separado" or self.forma == "separadito" or self.forma == "Separadito":
        print("Número Romano:",mil1,cent1,dec1,un1)
      else:
        print("Escriba bien ome")
     else:
       print("Ingrese un número menor a 3999")

"""###Prueba de clase con atributos implícitos."""

primero = Decimales1()
primero.conversión_dec()